'\" t
.\"     Title: odgi
.\"    Author: Erik Garrison
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-05-12
.\"    Manual: odgi
.\"    Source: odgi 0.4.1
.\"  Language: English
.\"
.TH "ODGI" "1" "2020-05-12" "odgi 0.4.1" "odgi"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
odgi \- dynamic succinct variation graph tool
.SH "SYNOPSIS"
.sp
\fBodgi\fP build \-g graph.gfa \-o graph.og
.sp
\fBodgi\fP stats \-i graph.og \-S
.sp
\fBodgi\fP sort \-i graph.og \-o graph.sorted.og \-p bSnSnS
.sp
\fBodgi\fP view \-i graph.og \-g
.sp
\fBodgi\fP kmers \-i graph.og \-c \-k 23 \-e 34 \-D 50
.sp
\fBodgi\fP unitig \-i graph.og \-f \-t 1324 \-l 120
.sp
\fBodgi\fP viz \-i graph.og \-o graph.og.png \-x 1920 \-y 1080 \-R \-t 28
.SH "DESCRIPTION"
.sp
Odgi is a set of of tools that manipulate variation graphs. TODO Explain data structure. TODO Link to vg paper. TODO Link to handle graph paper. TODO Explain purpose. TODO Give summary of the capabilities of the set of tools.
.SH "COMMANDS"
.sp
Each command has its own man page which can be viewed using e.g. \fBman odgi_build.1\fP. Below we have a brief summary of syntax and sub\-command description.
.sp
\fBodgi build\fP [\fB\-g, \-\-gfa\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi build(1) command constructs a succinct variation graph from a GFA. Currently, only GFA1 is supported. For details of the format please see \c
.URL "https://github.com/GFA\-spec/GFA\-spec/blob/master/GFA1.md" "" "."
.sp
\fBodgi stats\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi stats(1) command produces statistics of a variation graph. Among other metrics, it can calculate the #nodes, #edges, #paths and the total nucleotide length of the graph. Various histogram summary options complement the tool. If [\fB\-B, \-\-bed\-multicov\fP=\fIBED\fP] is set, the metrics will be produced for the intervals specified in the BED.
.sp
\fBodgi sort\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi sort(1) command sorts a succinct variation graph. Odgi sort offers a diverse palette of sorting algorithms to
determine the node order:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A topological sort: A graph can be sorted via \c
.URL "https://en.wikipedia.org/wiki/Breadth\-first_search" "breadth\-first search (BFS)" " "
or
.URL "https://en.wikipedia.org/wiki/Depth\-first_search" "depth\-first search (DFS)" "."
Optionally,
a chunk size specifies how much of the graph to grab at once in each topological sorting phase. The sorting algorithm will continue the sort from the
next node in the prior graph order that has not been sorted, yet. The cycle breaking algorithm applies a DFS sort until
a cycle is found. We break and start a new DFS sort phase from where we stopped.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A random sort: The graph is randomly sorted. The node order is randomly shuffled from \c
.URL "http://www.cplusplus.com/reference/random/mt19937/" "Mersenne Twister pseudo\-random" " "
generated numbers.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A sparse matrix mondriaan sort: We can partition a hypergraph with integer weights and uniform hyperedge costs using the \c
.URL "http://www.staff.science.uu.nl/~bisse101/Mondriaan/" "Mondriaan" " "
partitioner.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A 1D linear SGD sort: Odgi implements a 1D linear, variation graph adjusted, multi\-threaded version of the \c
.URL "https://arxiv.org/abs/1710.04626" "Graph Drawing
by Stochastic Gradient Descent"  algorithm. The force\-directed graph drawing algorithm minimizes the graph\(cqs energy function
or stress level. It applies stochastic gradient descent (SGD) to move a single pair of nodes at a time.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
An eades algorithmic sort: Use \c
.URL "http://www.it.usyd.edu.au/~pead6616/old_spring_paper.pdf" "Peter Eades\(aq heuristic for graph drawing" "."
.RE
.sp
Sorting the paths in a graph my refine the sorting process. For the users\(aq convenience, it is possible to specify a whole
pipeline of sorts within one parameter.
.sp
\fBodgi view\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi view(1) command can convert a graph in odgi format to GFAv1. It can reveal a graph\(cqs internal structures for e.g. debugging processes.
.sp
\fBodgi kmers\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-c, \-\-stdout\fP] [\fIOPTION\fP]...
.br
Given a kmer length, the odgi kmers(1) command can emit all kmers. The output can be refined by setting the maximum number
of furcations at edges or by not considering nodes above a given node degree limit.
.sp
\fBodgi unitig\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi unitig(1) command can print all unitigs of a given odgi graph to standard output in FASTA format. Unitigs can also be emitted
in a fixed sequence quality FASTQ format. Various parameters can refine the unitigs to print.
.sp
\fBodgi viz\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi viz(1) command can produce a linear, static visualization of an odgi variation graph. It aggregates the pangenome into bins
and directly renders a raster image. The binning level depends on the target width of the PNG to emit. Can be used to produce visualizations for gigabase scale pangenomes. For more information
about the binning process, please refer to odgi bin. If reverse coloring was selected, only
the bins with a reverse rate of at least 0.5 are colored. Currently, there is no parameter to color according to the
sequence coverage in bins available.
.SH "BUGS"
.sp
Refer to the \fBodgi\fP issue tracker at \c
.URL "https://github.com/vgteam/odgi/issues" "" "."
.SH "AUTHORS"
.sp
Erik Garrison from the University of California Santa Cruz wrote the whole \fBodgi\fP tool. Despite small code contributions, Simon Heumos from the Quantitative Biology Center TÃ¼bingen wrote \fBodgi pathindex\fP, \fBodgi panpos\fP, \fBodgi server\fP, and the documentation.
.SH "RESOURCES"
.sp
\fBProject web site:\fP \c
.URL "https://github.com/vgteam/odgi" "" ""
.sp
\fBGit source repository on GitHub:\fP \c
.URL "https://github.com/vgteam/odgi" "" ""
.sp
\fBGitHub organization:\fP \c
.URL "https://github.com/vgteam" "" ""
.sp
\fBDiscussion list / forum:\fP \c
.URL "https://github.com/vgteam/odgi/issues" "" ""
.SH "COPYING"
.sp
The MIT License (MIT)
.sp
Copyright (c) 2019 Erik Garrison
.sp
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:
.sp
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.sp
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.SH "AUTHOR"
.sp
Erik Garrison
'\" t
.\"     Title: odgi
.\"    Author: Erik Garrison
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-06-10
.\"    Manual: odgi
.\"    Source: odgi v0.4.1
.\"  Language: English
.\"
.TH "ODGI" "1" "2020-06-10" "odgi v0.4.1" "odgi"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
odgi \- dynamic succinct variation graph tool
.SH "SYNOPSIS"
.sp
\fBodgi\fP build \-g graph.gfa \-o graph.og
.sp
\fBodgi\fP stats \-i graph.og \-S
.sp
\fBodgi\fP sort \-i graph.og \-o graph.sorted.og \-p bSnSnS
.sp
\fBodgi\fP view \-i graph.og \-g
.sp
\fBodgi\fP kmers \-i graph.og \-c \-k 23 \-e 34 \-D 50
.sp
\fBodgi\fP unitig \-i graph.og \-f \-t 1324 \-l 120
.sp
\fBodgi\fP viz \-i graph.og \-o graph.og.png \-x 1920 \-y 1080 \-R \-t 28
.sp
\fBodgi\fP paths \-i graph.og \-f
.sp
\fBodgi\fP prune \-i graph.og \-o graph.pruned.og \-c 3 \-C 345 \-T
.sp
\fBodgi\fP unchop \-i graph.og \-o graph.unchopped.og
.sp
\fBodgi\fP normalize \-i graph.og \-o graph.normalized.og \-I 100 \-d
.sp
\fBodgi\fP subset \-i graph.og \-o graph.subsetted.og \-n 1 \-t 28
.sp
\fBodgi\fP bin \-i graph.og \-j \-w 100 \-s \-g
.sp
\fBodgi\fP matrix \-i graph.og \-e \-d
.sp
\fBodgi\fP chop \-i graph.og \-o graph.choped.og \-c 1000
.sp
\fBodgi\fP groom \-i graph.og \-o graph.groomed.og
.sp
\fBodgi\fP layout \-i graph.og \-o graph.svg \-R 10 \-m 100
.sp
\fBodgi\fP break \-i graph.og \-o graph.broken.og \-s 100 \-d
.sp
\fBodgi\fP pathindex \-i graph.og \-o graph.xp
.sp
\fBodgi\fP panpos \-i graph.og \-p Chr1 \-n 4
.sp
\fBodgi\fP server \-i graph.og \-p 4000 \-ip 192.168.8.9
.sp
\fBodgi\fP test
.sp
\fBodgi\fP version
.SH "DESCRIPTION"
.sp
\fBodgi\fP, the \fBOptimized Dynamic (genome) Graph Interface\fP, links
a thrifty dynamic in\-memory variation graph data model to a set of algorithms designed for scalable sorting, pruning,
transformation, and visualization of very large \c
.URL "https://pangenome.github.io/" "genome graphs" "."
\fBodgi\fP includes
.URL "https://pangenome.github.io/odgi/odgipy.html" "python bindings"
that can be used to
\c
.URL "https://odgi.readthedocs.io/en/latest/rst/tutorial.html" "directly
interface with its data model" . This \fBodgi\fP manual provides detailed information about its features and subcommands, including examples.
.SH "COMMANDS"
.sp
Each command has its own man page which can be viewed using e.g. \fBman odgi_build.1\fP. Below we have a brief summary of syntax and subcommand description.
.sp
\fBodgi build\fP [\fB\-g, \-\-gfa\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi build(1) command constructs a succinct variation graph from a GFA. Currently, only GFA1 is supported. For details of the format please see \c
.URL "https://github.com/GFA\-spec/GFA\-spec/blob/master/GFA1.md" "" "."
.sp
\fBodgi stats\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi stats(1) command produces statistics of a variation graph. Among other metrics, it can calculate the #nodes, #edges, #paths and the total nucleotide length of the graph. Various histogram summary options complement the tool. If [\fB\-B, \-\-bed\-multicov\fP=\fIBED\fP] is set, the metrics will be produced for the intervals specified in the BED.
.sp
\fBodgi sort\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi sort(1) command sorts a succinct variation graph. Odgi sort offers a diverse palette of sorting algorithms to
determine the node order:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A topological sort: A graph can be sorted via \c
.URL "https://en.wikipedia.org/wiki/Breadth\-first_search" "breadth\-first search (BFS)" " "
or
.URL "https://en.wikipedia.org/wiki/Depth\-first_search" "depth\-first search (DFS)" "."
Optionally,
a chunk size specifies how much of the graph to grab at once in each topological sorting phase. The sorting algorithm will continue the sort from the
next node in the prior graph order that has not been sorted, yet. The cycle breaking algorithm applies a DFS sort until
a cycle is found. We break and start a new DFS sort phase from where we stopped.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A random sort: The graph is randomly sorted. The node order is randomly shuffled from \c
.URL "http://www.cplusplus.com/reference/random/mt19937/" "Mersenne Twister pseudo\-random" " "
generated numbers.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A sparse matrix mondriaan sort: We can partition a hypergraph with integer weights and uniform hyperedge costs using the \c
.URL "http://www.staff.science.uu.nl/~bisse101/Mondriaan/" "Mondriaan" " "
partitioner.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A 1D linear SGD sort: Odgi implements a 1D linear, variation graph adjusted, multi\-threaded version of the \c
.URL "https://arxiv.org/abs/1710.04626" "Graph Drawing
by Stochastic Gradient Descent"  algorithm. The force\-directed graph drawing algorithm minimizes the graph\(cqs energy function
or stress level. It applies stochastic gradient descent (SGD) to move a single pair of nodes at a time.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
An eades algorithmic sort: Use \c
.URL "http://www.it.usyd.edu.au/~pead6616/old_spring_paper.pdf" "Peter Eades\(aq heuristic for graph drawing" "."
.RE
.sp
Sorting the paths in a graph my refine the sorting process. For the users\(aq convenience, it is possible to specify a whole
pipeline of sorts within one parameter.
.sp
\fBodgi view\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi view(1) command can convert a graph in odgi format to GFAv1. It can reveal a graph\(cqs internal structures for e.g. debugging processes.
.sp
\fBodgi kmers\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-c, \-\-stdout\fP] [\fIOPTION\fP]...
.br
Given a kmer length, the odgi kmers(1) command can emit all kmers. The output can be refined by setting the maximum number
of furcations at edges or by not considering nodes above a given node degree limit.
.sp
\fBodgi unitig\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi unitig(1) command can print all unitigs of a given odgi graph to standard output in FASTA format. Unitigs can also be emitted
in a fixed sequence quality FASTQ format. Various parameters can refine the unitigs to print.
.sp
\fBodgi viz\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi viz(1) command can produce a linear, static visualization of an odgi variation graph. It aggregates the pangenome into bins
and directly renders a raster image. The binning level depends on the target width of the PNG to emit. Can be used to produce visualizations for gigabase scale pangenomes. For more information
about the binning process, please refer to odgi bin. If reverse coloring was selected, only
the bins with a reverse rate of at least 0.5 are colored. Currently, there is no parameter to color according to the
sequence coverage in bins available.
.sp
\fBodgi paths\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi paths(1) command allows the investigation of paths of a given variation graph. It can calculate overlap statistics
of groupings of paths.
.sp
\fBodgi prune\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi prune(1) command can remove complex parts of a graph. One can drop paths, nodes by a certain kind of edge coverage,
edges and graph tips. Specifying a kmer length and a maximum number of furcations, the graph can be broken at edges not
fitting into these conditions.
.sp
\fBodgi unchop\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi unchop(1) command merges each unitig into a single node.
.sp
\fBodgi normalize\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi normalize(1) command unchops a given variation graph and simplifies redundant furcations.
.sp
\fBodgi subset\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
Extracting a node subset of a variation graph is the task of the odgi subset(1) command. Users can specify a node, a list of nodes
or a the context of which to generate a subset from.
.sp
\fBodgi matrix\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi matrix(1) command generates a sparse matrix format out of the graph topology of a given variation graph.
.sp
\fBodgi bin\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi bin(1) command bins a given variation graph. The pangenome sequence, the one\-time traversal of all nodes from smallest to
largest node identifier, can be summed up into bins of a specified size. For each bin, the path metainformation is summarized.
This enables a summarized view of gigabase scale graphs. Each step of a path is a bin and connected to its next bin via a link.
A link has a start bin identifier and an end bin identifier.
.br
The concept of odgi bin is also applied in odgi viz.
A demonstration of how the odgi bin JSON output can be used for an interactive visualization is realized in the \c
.URL "https://graph\-genome.github.io/" "Pantograph"
project. Per default, odgi bin writes the bins to stdout in a tab\-delimited format: \fBpath.name\fP, \fBpath.prefix\fP, \fBpath.suffix\fP,
\fBbin\fP (bin identifier), \fBmean.cov\fP (mean coverage of the path in this bin), \fBmean.inv\fP (mean inversion rate of this path in this bin),
\fBmean.pos\fP (mean nucleotide position of this path in this bin), \fBfirst.nucl\fP (first nucleotide position of this path in this bin),
\fBlast.nucl\fP (last nucleotide position of this path in this bin). These nucleotide ranges might span positions that are not present in the bin. Example:
A range of 1\-100 means that the first nucleotide has position 1 and the last has position 100, but nucleotide 45 could be located in
another bin. For an exact positional output, please specify [\fB\-j, \-\-json\fP].
.sp
\fBodgi chop\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fB\-c, \-\-chop\-to\fP=\fIN\fP] [\fIOPTION\fP]...
.br
The odgi chop(1) command chops long nodes into short ones while preserving the graph topology.
.sp
\fBodgi layout\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi layout(1) command draws 2D layouts of the graph using stochastic gradient descent (SGD). The input graph must be sorted
and id\-compacted. The algorithm itself is described in \c
.URL "https://arxiv.org/abs/1710.04626" "Graph Drawing by Stochastic Gradient Descent" "."
The force\-directed graph drawing algorithm minimizes the graph\(cqs energy function or stress level.
It applies SGD to move a single pair of nodes at a time. The rendered graph is written in SVG format.
.sp
\fBodgi flatten\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi flatten(1) command projects the graph sequence and paths into FASTA and BED.
.sp
\fBodgi break\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi break(1) command finds cycles in a graph via \c
.URL "https://en.wikipedia.org/wiki/Breadth\-first_search" "breadth\-first search (BFS)" " "
and breaks them, also dropping
the graph\(cqs paths.
.sp
\fBodgi pathindex\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.br
The odgi pathindex(1) command generates a path index of a graph. It uses succinct data structures to encode the index.
The path index represents a subset of the features of a fully realized \c
.URL "https://github.com/vgteam/xg" "xg index" "."
Having a path index, we can use
odgi panpos to go from \fBpath:position\fP \(-> \fBpangenome:position\fP which is important when
navigating large graphs in an interactive manner like in the \c
.URL "https://graph\-genome.github.io/" "Pantograph" " "
project.
.sp
\fBodgi panpos\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-p, \-\-path\fP=\fISTRING\fP] [\fB\-n, \-\-nuc\-pos\fP=\fIN\fP] [\fIOPTION\fP]...
.br
The odgi panpos(1) command give a pangenome position for a given path and nucleotide position. It requires a path index,
which can be created with odgi pathindex. Going from \fBpath:position\fP \(-> \fBpangenome:position\fP is important when
navigating large graphs in an interactive manner like in the \c
.URL "https://graph\-genome.github.io/" "Pantograph" " "
project. All
input and output positions are 1\-based.
.sp
\fBodgi server\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-p, \-\-port\fP=\fIN\fP] [\fIOPTION\fP]...
.br
The odgi server(1) command starts an HTTP server with a given path index as input. The idea is that we can go from
\fBpath:position\fP \(-> \fBpangenome:position\fP via GET requests to the HTTP server. The server headers do not block cross origin requests.
Example GET request: \fI\c
.URL "http://localost:3000/path_name/nucleotide_position" "" "\fP."
.br
The required path index can be created with odgi pathindex. Going from \fBpath:position\fP \(-> \fBpangenome:position\fP is important when
navigating large graphs in an interactive manner like in the \c
.URL "https://graph\-genome.github.io/" "Pantograph" " "
project. All
input and output positions are 1\-based. If no IP address is specified, the server will run on localhost.
.sp
\fBodgi test\fP [<TEST NAME|PATTERN|TAGS> ...] [\fIOPTION\fP]...
.br
The odgi test(1) command starts all unit tests that are implemented in odgi. For targeted testing, a subset of tests can
be selected. odgi test(1) depends on \c
.URL "https://github.com/catchorg/Catch2" "Catch2" "."
In the default setting, all results are printed to stdout.
.sp
\fBodgi version\fP [\fIOPTION\fP]...
.br
The odgi version(1) command prints the current git version with tags and codename to stdout (like \fIv\-44\-g89d022b "back to old ABI"\fP). Optionally, only the release, version or codename can be printed.
.SH "BUGS"
.sp
Refer to the \fBodgi\fP issue tracker at \c
.URL "https://github.com/vgteam/odgi/issues" "" "."
.SH "AUTHORS"
.sp
Erik Garrison from the University of California Santa Cruz wrote the whole \fBodgi\fP tool. Simon Heumos from the Quantitative Biology Center Tübingen wrote \fBodgi pathindex\fP, \fBodgi panpos\fP, \fBodgi server\fP, and this documentation.
.SH "RESOURCES"
.sp
\fBProject web site:\fP \c
.URL "https://github.com/vgteam/odgi" "" ""
.sp
\fBGit source repository on GitHub:\fP \c
.URL "https://github.com/vgteam/odgi" "" ""
.sp
\fBGitHub organization:\fP \c
.URL "https://github.com/vgteam" "" ""
.sp
\fBDiscussion list / forum:\fP \c
.URL "https://github.com/vgteam/odgi/issues" "" ""
.SH "COPYING"
.sp
The MIT License (MIT)
.sp
Copyright (c) 2019 Erik Garrison
.sp
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:
.sp
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.sp
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.SH "AUTHOR"
.sp
Erik Garrison
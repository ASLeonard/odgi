<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <title>odgi bin(1)</title>
</articleinfo>
<section id="_name">
<title>NAME</title>
<simpara>odgi_bin - binning of pangenome sequence and path information in the graph</simpara>
</section>
<section id="_synopsis">
<title>SYNOPSIS</title>
<simpara><emphasis role="strong">odgi bin</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;</simpara>
</section>
<section id="_description">
<title>DESCRIPTION</title>
<simpara>The odgi bin(1) command bins a given variation graph. The pangenome sequence, the one-time traversal of all nodes from smallest to
largest node identifier, can be summed up into bins of a specified size. For each bin, the path metainformation is summarized.
This enables a summarized view of gigabase scale graphs. Each step of a path is a bin and connected to its next bin via a link.
A link has a start bin identifier and an end bin identifier.<?asciidoc-br?>
The concept of odgi bin is also applied in odgi <link linkend="odgi_viz.adoc#_odgi_viz1">viz</link>.
A demonstration of how the odgi bin JSON output can be used for an interactive visualization is realized in the <ulink url="https://graph-genome.github.io/">Pantograph</ulink>
project. Per default, odgi bin writes the bins to stdout in a tab-delimited format: <emphasis role="strong">path.name</emphasis>, <emphasis role="strong">path.prefix</emphasis>, <emphasis role="strong">path.suffix</emphasis>,
<emphasis role="strong">bin</emphasis> (bin identifier), <emphasis role="strong">mean.cov</emphasis> (mean coverage of the path in this bin), <emphasis role="strong">mean.inv</emphasis> (mean inversion rate of this path in this bin),
<emphasis role="strong">mean.pos</emphasis> (mean nucleotide position of this path in this bin), <emphasis role="strong">first.nucl</emphasis> (first nucleotide position of this path in this bin),
<emphasis role="strong">last.nucl</emphasis> (last nucleotide position of this path in this bin). These nucleotide ranges might span positions that are not present in the bin. Example:
A range of 1-100 means that the first nucleotide has position 1 and the last has position 100, but nucleotide 45 could be located in
another bin. For an exact positional output, please specify [<emphasis role="strong">-j, --json</emphasis>].<?asciidoc-br?>
Running odgi bin in <ulink url="https://github.com/tpook92/HaploBlocker">HaploBlocker</ulink> mode, only arguments [<emphasis role="strong">-b, --haplo-blocker</emphasis>],
[<emphasis role="strong">-p[N], --haplo-blocker-min-paths[N]</emphasis>], and [<emphasis role="strong">-c[N], --haplo-blocker-min-coverage[N]</emphasis>] are required. A TSV is printed to stdout:
Each row corresponds to a node. Each column corresponds to a path. Each value is the coverage of a specific node of a specific path.</simpara>
</section>
<section id="_options">
<title>OPTIONS</title>
<section id="_graph_files_io">
<title>Graph Files IO</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>
</term>
<listitem>
<simpara>
  File containing the succinct variation graph to investigate the bin from. The file name usually ends with <emphasis>.og</emphasis>.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_fasta_options">
<title>FASTA Options</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-f, --fasta</emphasis>=<emphasis>FILE</emphasis>
</term>
<listitem>
<simpara>
  Write the pangenome sequence to <emphasis>FILE</emphasis> in FASTA format.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_bin_options">
<title>Bin Options</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-n, --number-bins</emphasis>=<emphasis>N</emphasis>
</term>
<listitem>
<simpara>
  The number of bins the pangenome sequence should be chopped up to.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-w, --bin-width</emphasis>=<emphasis>N</emphasis>
</term>
<listitem>
<simpara>
  The bin width specifies the size of each bin.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-D, --path-delim</emphasis>=<emphasis>STRING</emphasis>
</term>
<listitem>
<simpara>
  Annotate rows by prefix and suffix of this delimiter.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-a, --aggregate-delim</emphasis>
</term>
<listitem>
<simpara>
  Aggregate on path prefix delimiter. Argument depends on [<emphasis role="strong">-D, --path-delim</emphasis>=<emphasis>STRING</emphasis>].
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-j, --json</emphasis>
</term>
<listitem>
<simpara>
  Print bins and links to stdout in pseudo JSON format. Each line is a valid JSON object, but the whole file is not a valid JSON!
  First, each bin including its pangenome sequence is printed to stdout per line. Second, for each path in the graph, its
  traversed bins including metainformation: <emphasis role="strong">bin</emphasis> (bin identifier), <emphasis role="strong">mean.cov</emphasis> (mean coverage of the path in this bin), <emphasis role="strong">mean.inv</emphasis> (mean inversion rate of this path in this bin),
  <emphasis role="strong">mean.pos</emphasis> (mean nucleotide position of this path in this bin), and an array of ranges determining the nucleotide position
  of the path in this bin. Switching first and last nucleotide in a range represents a complement reverse
  orientation of that particular sequence.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-s, --no-seqs</emphasis>
</term>
<listitem>
<simpara>
  If [<emphasis role="strong">-j, --json</emphasis>] is set, no nucleotide sequences will be printed to stdout in order to save disk space.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-g, --no-gap-links</emphasis>
</term>
<listitem>
<simpara>
  We divide links into 2 classes:
</simpara>
<orderedlist numeration="arabic">
<listitem>
<simpara>
the links which help to follow complex variations. They need to be drawn, else one could not follow the sequence of a path.
</simpara>
</listitem>
<listitem>
<simpara>
the links helping to follow simple variations. These links are called <emphasis role="strong">gap-links</emphasis>. Such links solely connecting a
  path from left to right may not be relevant to understand a path&#8217;s traversal through the bins. Therefore, when this option
  is set, the gap-links are left out saving disk space
</simpara>
</listitem>
</orderedlist>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_haploblocker_options">
<title>HaploBlocker Options</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-b, --haplo-blocker</emphasis>
</term>
<listitem>
<simpara>
    Write a TSV to stdout formatted in a way ready for HaploBlocker: Each row corresponds to a node. Each column corresponds to a path.
    Each value is the coverage of a specific node of a specific path.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-p[N], --haplo-blocker-min-paths[N]</emphasis>
</term>
<listitem>
<simpara>
    Specify the minimum number of paths that need to be present in the bin to actually report that bin. The default value is 1.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-c[N], --haplo-blocker-min-coverage[N]</emphasis>
</term>
<listitem>
<simpara>
    Specify the minimum coverage a path needs to have in a bin to actually report that bin. The default value is 1.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_program_information">
<title>Program Information</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">-h, --help</emphasis>
</term>
<listitem>
<simpara>
  Print a help message for <emphasis role="strong">odgi bin</emphasis>.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">-P, --progress</emphasis>
</term>
<listitem>
<simpara>
    Write the current progress to stderr.
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
</section>
<section id="_exit_status">
<title>EXIT STATUS</title>
<variablelist>
<varlistentry>
<term>
<emphasis role="strong">0</emphasis>
</term>
<listitem>
<simpara>
  Success.
</simpara>
</listitem>
</varlistentry>
<varlistentry>
<term>
<emphasis role="strong">1</emphasis>
</term>
<listitem>
<simpara>
  Failure (syntax or usage error; parameter error; file processing failure; unexpected error).
</simpara>
</listitem>
</varlistentry>
</variablelist>
</section>
<section id="_bugs">
<title>BUGS</title>
<simpara>Refer to the <emphasis role="strong">odgi</emphasis> issue tracker at <ulink url="https://github.com/pangenome/odgi/issues">https://github.com/pangenome/odgi/issues</ulink>.</simpara>
</section>
<section id="_authors">
<title>AUTHORS</title>
<simpara><emphasis role="strong">odgi bin</emphasis> was written by Erik Garrison and Simon Heumos</simpara>
</section>
</article>

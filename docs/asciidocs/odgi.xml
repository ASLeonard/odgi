<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<?asciidoc-toc?>
<?asciidoc-numbered?>

<article lang="en">
<articleinfo>
    <title>odgi (1)</title>
</articleinfo>
<section id="_name">
<title>NAME</title>
<simpara>odgi - dynamic succinct variation graph tool</simpara>
</section>
<section id="_synopsis">
<title>SYNOPSIS</title>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_build.adoc#_odgi_build1">build</link> -g graph.gfa -o graph.og</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_validate.adoc#_odgi_validate1">validate</link> -i graph.og</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_stats.adoc#_odgi_stats1">stats</link> -i graph.og -S</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_degree.adoc#_odgi_degree1">stats</link> -i graph.og -S</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_depth.adoc#_odgi_depth1">depth</link> -i graph.og</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_overlap.adoc#_odgi_overlap1">overlap</link> -i graph.og -r path_name</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_cover.adoc#_odgi_cover1">cover</link> -i graph.og -o graph.paths.og</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_extract.adoc#_odgi_extract1">extract</link> -i graph.og -p prefix -r path_name:0-17</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_explode.adoc#_odgi_explode1">explode</link> -i graph.og -p prefix</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_squeeze.adoc#_odgi_squeeze1">squeeze</link> -f input_graphs.txt -o graphs.og</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_position.adoc#_odgi_position1">position</link> -i target_graph.og -g</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_sort.adoc#_odgi_sort1">sort</link> -i graph.og -o graph.sorted.og -p bSnSnS</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_view.adoc#_odgi_view1">view</link> -i graph.og -g</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_kmers.adoc#_odgi_kmers1">kmers</link> -i graph.og -c -k 23 -e 34 -D 50</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_unitig.adoc#_odgi_unitig1">unitig</link> -i graph.og -f -t 1324 -l 120</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_viz.adoc#_odgi_viz1">viz</link> -i graph.og -o graph.og.png -x 1920 -y 1080 -R -t 28</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_draw.adoc#_odgi_draw1">draw</link> -i graph.og -c coords.lay -p .png -x 1920 -y 1080 -R -t 28</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_paths.adoc#_odgi_paths1">paths</link> -i graph.og -f</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_prune.adoc#_odgi_prune1">prune</link> -i graph.og -o graph.pruned.og -c 3 -C 345 -T</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_unchop.adoc#_odgi_unchop1">unchop</link> -i graph.og -o graph.unchopped.og</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_normalize.adoc#_odgi_normalize1">normalize</link> -i graph.og -o graph.normalized.og -I 100 -d</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_bin.adoc#_odgi_bin1">bin</link> -i graph.og -j -w 100 -s -g</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_matrix.adoc#_odgi_matrix1">matrix</link> -i graph.og -e -d</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_chop.adoc#_odgi_chop1">chop</link> -i graph.og -o graph.choped.og -c 1000</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_groom.adoc#_odgi_groom1">groom</link> -i graph.og -o graph.groomed.og</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_layout.adoc#_odgi_layout1">layout</link> -i graph.og -o graph.svg -R 10 -m 100</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_break.adoc#_odgi_break1">break</link> -i graph.og -o graph.broken.og -s 100 -d</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_pathindex.adoc#_odgi_pathindex1">pathindex</link> -i graph.og -o graph.xp</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_panpos.adoc#_odgi_panpos1">panpos</link> -i graph.og -p Chr1 -n 4</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_server.adoc#_odgi_server1">server</link> -i graph.og -p 4000 -ip 192.168.8.9</simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_test.adoc#_odgi_test1">test</link></simpara>
<simpara><emphasis role="strong">odgi</emphasis> <link linkend="odgi_version.adoc#_odgi_version1">version</link></simpara>
</section>
<section id="_description">
<title>DESCRIPTION</title>
<simpara><emphasis role="strong">odgi</emphasis>, the <emphasis role="strong">Optimized Dynamic (genome) Graph Interface</emphasis>, links
a thrifty dynamic in-memory variation graph data model to a set of algorithms designed for scalable sorting, pruning,
transformation, and visualization of very large <ulink url="https://pangenome.github.io/">genome graphs</ulink>. <emphasis role="strong">odgi</emphasis> includes <ulink url="https://pangenome.github.io/odgi/odgipy.html">python bindings</ulink>
that can be used to
<ulink url="https://odgi.readthedocs.io/en/latest/rst/tutorial.html">directly
interface with its data model</ulink>. This <emphasis role="strong">odgi</emphasis> manual provides detailed information about its features and subcommands, including examples.</simpara>
</section>
<section id="_commands">
<title>COMMANDS</title>
<simpara>Each command has its own man page which can be viewed using e.g. <emphasis role="strong">man odgi_build.1</emphasis>. Below we have a brief summary of syntax and subcommand description.</simpara>
<simpara><emphasis role="strong">odgi build</emphasis> [<emphasis role="strong">-g, --gfa</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi build(1) command constructs a succinct variation graph from a GFA. Currently, only GFA1 is supported. For details of the format please see <ulink url="https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md">https://github.com/GFA-spec/GFA-spec/blob/master/GFA1.md</ulink>.</simpara>
<simpara><emphasis role="strong">odgi validate</emphasis> [<emphasis role="strong">-i, --input</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi validate(1) command validates the graph (currently, it checks if the paths are consistent with the graph topology).</simpara>
<simpara><emphasis role="strong">odgi stats</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi stats(1) command produces statistics of a variation graph. Among other metrics, it can calculate the #nodes, #edges, #paths and the total nucleotide length of the graph. Various histogram summary options complement the tool. If [<emphasis role="strong">-B, --bed-multicov</emphasis>=<emphasis>BED</emphasis>] is set, the metrics will be produced for the intervals specified in the BED.</simpara>
<simpara><emphasis role="strong">odgi degree</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi degree(1) command describes the graph in terms of node degree. For the input graph, it shows the node.count, edge.count, avg.degree, min.degree, and max.degree.</simpara>
<simpara><emphasis role="strong">odgi depth</emphasis> [<emphasis role="strong">-i, --input</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi depth(1) command finds the depth of graph as defined by query criteria.</simpara>
<simpara><emphasis role="strong">odgi overlap</emphasis> [<emphasis role="strong">-i, --input</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi overlap(1) command finds the paths touched by the input paths.</simpara>
<simpara><emphasis role="strong">odgi cover</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi cover(1) command finds a path cover of a variation graph, with a specified number of paths per component.</simpara>
<simpara><emphasis role="strong">odgi extract</emphasis> [<emphasis role="strong">-f, --input-graphs</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi extract(1) command extracts parts of the graph as defined by query criteria.</simpara>
<simpara><emphasis role="strong">odgi explode</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-p, --prefix</emphasis>=<emphasis>STRING</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi explode(1) command breaks a graph into connected components, writing each component in its own file.</simpara>
<simpara><emphasis role="strong">odgi squeeze</emphasis> [<emphasis role="strong">-f, --input-graphs</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi squeeze(1) command squeezes multiple graphs into the same file.</simpara>
<simpara><emphasis role="strong">odgi position</emphasis> [<emphasis role="strong">-i, --target</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi position(1) command position parts of the graph as defined by query criteria.</simpara>
<simpara><emphasis role="strong">odgi sort</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi sort(1) command sorts a succinct variation graph. The command offers a diverse palette of sorting algorithms to
determine the node order:</simpara>
<itemizedlist>
<listitem>
<simpara>
A topological sort: A graph can be sorted via <ulink url="https://en.wikipedia.org/wiki/Breadth-first_search">breadth-first search (BFS)</ulink> or <ulink url="https://en.wikipedia.org/wiki/Depth-first_search">depth-first search (DFS)</ulink>. Optionally,
   a chunk size specifies how much of the graph to grab at once in each topological sorting phase. The sorting algorithm will continue the sort from the
   next node in the prior graph order that has not been sorted, yet. The cycle breaking algorithm applies a DFS sort until
   a cycle is found. We break and start a new DFS sort phase from where we stopped.
</simpara>
</listitem>
<listitem>
<simpara>
A random sort: The graph is randomly sorted. The node order is randomly shuffled from <ulink url="http://www.cplusplus.com/reference/random/mt19937/">Mersenne Twister pseudo-random</ulink> generated numbers.
</simpara>
</listitem>
<listitem>
<simpara>
A sparse matrix mondriaan sort: We can partition a hypergraph with integer weights and uniform hyperedge costs using the <ulink url="http://www.staff.science.uu.nl/~bisse101/Mondriaan/">Mondriaan</ulink> partitioner.
</simpara>
</listitem>
<listitem>
<simpara>
A 1D linear SGD sort: Odgi implements a 1D linear, variation graph adjusted, multi-threaded version of the <ulink url="https://arxiv.org/abs/1710.04626">Graph Drawing
   by Stochastic Gradient Descent</ulink> algorithm. The force-directed graph drawing algorithm minimizes the graph&#8217;s energy function
   or stress level. It applies stochastic gradient descent (SGD) to move a single pair of nodes at a time.
</simpara>
</listitem>
<listitem>
<simpara>
An eades algorithmic sort: Use <ulink url="http://www.it.usyd.edu.au/~pead6616/old_spring_paper.pdf">Peter Eades' heuristic for graph drawing</ulink>.
</simpara>
</listitem>
</itemizedlist>
<simpara>Sorting the paths in a graph my refine the sorting process. For the users' convenience, it is possible to specify a whole
pipeline of sorts within one parameter.</simpara>
<simpara><emphasis role="strong">odgi view</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi view(1) command can convert a graph in odgi format to GFAv1. It can reveal a graph&#8217;s internal structures for e.g. debugging processes.</simpara>
<simpara><emphasis role="strong">odgi kmers</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-c, --stdout</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
Given a kmer length, the odgi kmers(1) command can emit all kmers. The output can be refined by setting the maximum number
of furcations at edges or by not considering nodes above a given node degree limit.</simpara>
<simpara><emphasis role="strong">odgi unitig</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi unitig(1) command can print all unitigs of a given odgi graph to standard output in FASTA format. Unitigs can also be emitted
in a fixed sequence quality FASTQ format. Various parameters can refine the unitigs to print.</simpara>
<simpara><emphasis role="strong">odgi viz</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi viz(1) command can produce a linear, static visualization of an odgi variation graph. It aggregates the pangenome into bins
and directly renders a raster image. The binning level depends on the target width of the PNG to emit. Can be used to produce visualizations for gigabase scale pangenomes. For more information
about the binning process, please refer to <link linkend="odgi_bin.adoc#_odgi_bin1">odgi bin</link>. If reverse coloring was selected, only
the bins with a reverse rate of at least 0.5 are colored. Currently, there is no parameter to color according to the
sequence coverage in bins available.</simpara>
<simpara><emphasis role="strong">odgi draw</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-c, --coords-in</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-p, --png</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;
The odgi draw(1) command draws previously-determined 2D layouts of the graph with diverse annotations.</simpara>
<simpara><emphasis role="strong">odgi paths</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi paths(1) command allows the investigation of paths of a given variation graph. It can calculate overlap statistics
of groupings of paths.</simpara>
<simpara><emphasis role="strong">odgi prune</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi prune(1) command can remove complex parts of a graph. One can drop paths, nodes by a certain kind of edge coverage,
edges and graph tips. Specifying a kmer length and a maximum number of furcations, the graph can be broken at edges not
fitting into these conditions.</simpara>
<simpara><emphasis role="strong">odgi unchop</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi unchop(1) command merges each unitig into a single node.</simpara>
<simpara><emphasis role="strong">odgi normalize</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi normalize(1) command <link linkend="odgi_unchop.adoc#_odgi_unchop1">unchops</link> a given variation graph and simplifies redundant furcations.</simpara>
<simpara><emphasis role="strong">odgi matrix</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi matrix(1) command generates a sparse matrix format out of the graph topology of a given variation graph.</simpara>
<simpara><emphasis role="strong">odgi bin</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi bin(1) command bins a given variation graph. The pangenome sequence, the one-time traversal of all nodes from smallest to
largest node identifier, can be summed up into bins of a specified size. For each bin, the path metainformation is summarized.
This enables a summarized view of gigabase scale graphs. Each step of a path is a bin and connected to its next bin via a link.
A link has a start bin identifier and an end bin identifier.<?asciidoc-br?>
The concept of odgi bin is also applied in odgi <link linkend="odgi_viz.adoc#_odgi_viz1">viz</link>.
A demonstration of how the odgi bin JSON output can be used for an interactive visualization is realized in the <ulink url="https://graph-genome.github.io/">Pantograph</ulink>
project. Per default, odgi bin writes the bins to stdout in a tab-delimited format: <emphasis role="strong">path.name</emphasis>, <emphasis role="strong">path.prefix</emphasis>, <emphasis role="strong">path.suffix</emphasis>,
<emphasis role="strong">bin</emphasis> (bin identifier), <emphasis role="strong">mean.cov</emphasis> (mean coverage of the path in this bin), <emphasis role="strong">mean.inv</emphasis> (mean inversion rate of this path in this bin),
<emphasis role="strong">mean.pos</emphasis> (mean nucleotide position of this path in this bin), <emphasis role="strong">first.nucl</emphasis> (first nucleotide position of this path in this bin),
<emphasis role="strong">last.nucl</emphasis> (last nucleotide position of this path in this bin). These nucleotide ranges might span positions that are not present in the bin. Example:
A range of 1-100 means that the first nucleotide has position 1 and the last has position 100, but nucleotide 45 could be located in
another bin. For an exact positional output, please specify [<emphasis role="strong">-j, --json</emphasis>].</simpara>
<simpara><emphasis role="strong">odgi chop</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-c, --chop-to</emphasis>=<emphasis>N</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi chop(1) command chops long nodes into short ones while preserving the graph topology.</simpara>
<simpara><emphasis role="strong">odgi layout</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi layout(1) command computes 2D layouts of the graph using stochastic gradient descent (SGD). The input graph must be sorted
and id-compacted. The algorithm itself is described in <ulink url="https://arxiv.org/abs/1710.04626">Graph Drawing by Stochastic Gradient Descent</ulink>.
The force-directed graph drawing algorithm minimizes the graph&#8217;s energy function or stress level.
It applies SGD to move a single pair of nodes at a time.</simpara>
<simpara><emphasis role="strong">odgi flatten</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi flatten(1) command projects the graph sequence and paths into FASTA and BED.</simpara>
<simpara><emphasis role="strong">odgi break</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi break(1) command finds cycles in a graph via <ulink url="https://en.wikipedia.org/wiki/Breadth-first_search">breadth-first search (BFS)</ulink> and breaks them, also dropping
the graph&#8217;s paths.</simpara>
<simpara><emphasis role="strong">odgi pathindex</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-o, --out</emphasis>=<emphasis>FILE</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi pathindex(1) command generates a path index of a graph. It uses succinct data structures to encode the index.
The path index represents a subset of the features of a fully realized <ulink url="https://github.com/vgteam/xg">xg index</ulink>. Having a path index, we can use
odgi <link linkend="odgi_panpos.adoc#_odgi_panpos1">panpos</link> to go from <emphasis role="strong">path:position</emphasis> &#8594; <emphasis role="strong">pangenome:position</emphasis> which is important when
navigating large graphs in an interactive manner like in the <ulink url="https://graph-genome.github.io/">Pantograph</ulink> project.</simpara>
<simpara><emphasis role="strong">odgi panpos</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-p, --path</emphasis>=<emphasis>STRING</emphasis>] [<emphasis role="strong">-n, --nuc-pos</emphasis>=<emphasis>N</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi panpos(1) command give a pangenome position for a given path and nucleotide position. It requires a path index,
which can be created with odgi <link linkend="odgi_pathindex.adoc#_odgi_pathindex1">pathindex</link>. Going from <emphasis role="strong">path:position</emphasis> &#8594; <emphasis role="strong">pangenome:position</emphasis> is important when
navigating large graphs in an interactive manner like in the <ulink url="https://graph-genome.github.io/">Pantograph</ulink> project. All
input and output positions are 1-based.</simpara>
<simpara><emphasis role="strong">odgi server</emphasis> [<emphasis role="strong">-i, --idx</emphasis>=<emphasis>FILE</emphasis>] [<emphasis role="strong">-p, --port</emphasis>=<emphasis>N</emphasis>] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi server(1) command starts an HTTP server with a given path index as input. The idea is that we can go from
<emphasis role="strong">path:position</emphasis> &#8594; <emphasis role="strong">pangenome:position</emphasis> via GET requests to the HTTP server. The server headers do not block cross origin requests.
Example GET request: <emphasis>http://localost:3000/path_name/nucleotide_position</emphasis>.<?asciidoc-br?>
The required path index can be created with odgi <link linkend="odgi_pathindex.adoc#_odgi_pathindex1">pathindex</link>. Going from <emphasis role="strong">path:position</emphasis> &#8594; <emphasis role="strong">pangenome:position</emphasis> is important when
navigating large graphs in an interactive manner like in the <ulink url="https://graph-genome.github.io/">Pantograph</ulink> project. All
input and output positions are 1-based. If no IP address is specified, the server will run on localhost.</simpara>
<simpara><emphasis role="strong">odgi test</emphasis> [&lt;TEST NAME|PATTERN|TAGS&gt; &#8230;] [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi test(1) command starts all unit tests that are implemented in odgi. For targeted testing, a subset of tests can
be selected. odgi test(1) depends on <ulink url="https://github.com/catchorg/Catch2">Catch2</ulink>. In the default setting, all results are printed to stdout.</simpara>
<simpara><emphasis role="strong">odgi version</emphasis> [<emphasis>OPTION</emphasis>]&#8230;<?asciidoc-br?>
The odgi version(1) command prints the current git version with tags and codename to stdout (like <emphasis>v-44-g89d022b "back to old ABI"</emphasis>). Optionally, only the release, version or codename can be printed.</simpara>
</section>
<section id="_bugs">
<title>BUGS</title>
<simpara>Refer to the <emphasis role="strong">odgi</emphasis> issue tracker at <ulink url="https://github.com/pangenome/odgi/issues">https://github.com/pangenome/odgi/issues</ulink>.</simpara>
</section>
<section id="_authors">
<title>AUTHORS</title>
<simpara>Erik Garrison from the University of California Santa Cruz wrote the whole <emphasis role="strong">odgi</emphasis> tool. Simon Heumos from the Quantitative Biology Center Tübingen wrote <emphasis role="strong">odgi pathindex</emphasis>, <emphasis role="strong">odgi panpos</emphasis>, <emphasis role="strong">odgi server</emphasis>, and this documentation. Andrea Guarracino from the University of Rome Tor Vergata wrote <emphasis role="strong">odgi viz</emphasis>, <emphasis role="strong">odgi extract</emphasis>, <emphasis role="strong">odgi cover</emphasis>, <emphasis role="strong">odgi explode</emphasis>, <emphasis role="strong">odgi squeeze</emphasis>, <emphasis role="strong">odgi depth</emphasis>, <emphasis role="strong">odgi overlap</emphasis>, <emphasis role="strong">odgi validate</emphasis>, and this documentation.</simpara>
</section>
<section id="_resources">
<title>RESOURCES</title>
<simpara><emphasis role="strong">Project web site:</emphasis> <ulink url="https://github.com/pangenome/odgi">https://github.com/pangenome/odgi</ulink></simpara>
<simpara><emphasis role="strong">Git source repository on GitHub:</emphasis> <ulink url="https://github.com/pangenome/odgi">https://github.com/pangenome/odgi</ulink></simpara>
<simpara><emphasis role="strong">GitHub organization:</emphasis> <ulink url="https://github.com/pangenome">https://github.com/pangenome</ulink></simpara>
<simpara><emphasis role="strong">Discussion list / forum:</emphasis> <ulink url="https://github.com/pangenome/odgi/issues">https://github.com/pangenome/odgi/issues</ulink></simpara>
</section>
<section id="_copying">
<title>COPYING</title>
<simpara>The MIT License (MIT)</simpara>
<simpara>Copyright (c) 2019-2021 Erik Garrison</simpara>
<simpara>Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:</simpara>
<simpara>The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.</simpara>
<simpara>THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</simpara>
</section>
</article>

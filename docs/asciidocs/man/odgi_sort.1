'\" t
.\"     Title: odgi sort
.\"    Author: Erik Garrison
.\" Generator: Asciidoctor 2.0.10
.\"      Date: 2020-06-22
.\"    Manual: odgi sort
.\"    Source: odgi v0.4.1
.\"  Language: English
.\"
.TH "ODGI_SORT" "1" "2020-06-22" "odgi v0.4.1" "odgi sort"
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.ss \n[.ss] 0
.nh
.ad l
.de URL
\fI\\$2\fP <\\$1>\\$3
..
.als MTO URL
.if \n[.g] \{\
.  mso www.tmac
.  am URL
.    ad l
.  .
.  am MTO
.    ad l
.  .
.  LINKSTYLE blue R < >
.\}
.SH "NAME"
odgi_sort \- sort a variation graph
.SH "SYNOPSIS"
.sp
\fBodgi sort\fP [\fB\-i, \-\-idx\fP=\fIFILE\fP] [\fB\-o, \-\-out\fP=\fIFILE\fP] [\fIOPTION\fP]...
.SH "DESCRIPTION"
.sp
The odgi sort(1) command sorts a succinct variation graph. Odgi sort offers a diverse palette of sorting algorithms to
determine the node order:
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A topological sort: A graph can be sorted via \c
.URL "https://en.wikipedia.org/wiki/Breadth\-first_search" "breadth\-first search (BFS)" " "
or
.URL "https://en.wikipedia.org/wiki/Depth\-first_search" "depth\-first search (DFS)" "."
Optionally,
a chunk size specifies how much of the graph to grab at once in each topological sorting phase. The sorting algorithm will continue the sort from the
next node in the prior graph order that has not been sorted, yet. The cycle breaking algorithm applies a DFS sort until
a cycle is found. We break and start a new DFS sort phase from where we stopped.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A random sort: The graph is randomly sorted. The node order is randomly shuffled from \c
.URL "http://www.cplusplus.com/reference/random/mt19937/" "Mersenne Twister pseudo\-random" " "
generated numbers.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A sparse matrix mondriaan sort: We can partition a hypergraph with integer weights and uniform hyperedge costs using the \c
.URL "http://www.staff.science.uu.nl/~bisse101/Mondriaan/" "Mondriaan" " "
partitioner.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
A 1D linear SGD sort: Odgi implements a 1D linear, variation graph adjusted, multi\-threaded version of the \c
.URL "https://arxiv.org/abs/1710.04626" "Graph Drawing
by Stochastic Gradient Descent"  algorithm. The force\-directed graph drawing algorithm minimizes the graph\(cqs energy function
or stress level. It applies stochastic gradient descent (SGD) to move a single pair of nodes at a time.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.  sp -1
.  IP \(bu 2.3
.\}
An eades algorithmic sort: Use \c
.URL "http://www.it.usyd.edu.au/~pead6616/old_spring_paper.pdf" "Peter Eades\(aq heuristic for graph drawing" "."
.RE
.sp
Sorting the paths in a graph my refine the sorting process. For the users\(aq convenience, it is possible to specify a whole
pipeline of sorts within one parameter.
.SH "OPTIONS"
.SS "Graph Files IO"
.sp
\fB\-i, \-\-idx\fP=\fIFILE\fP
.RS 4
File containing the succinct variation graph to sort. The file name usually ends with \fI.og\fP.
.RE
.sp
\fB\-o, \-\-out\fP=\fIFILE\fP
.RS 4
Write the sorted dynamic succinct variation graph to this file. A file ending with \fI.og\fP is recommended.
.RE
.sp
\fB\-s, \-\-sort\-order\fP=\fIFILE\fP
.RS 4
File containing the sort order. Each line contains one node identifier.
.RE
.SS "Topological Sorts"
.sp
\fB\-b, \-\-breadth\-first\fP
.RS 4
Use a (chunked) breadth first topological sort.
.RE
.sp
\fB\-B, \-\-breadth\-first\-chunk\fP=\fIN\fP
.RS 4
Chunk size for breadth first topological sort. Specify how many nucleotides to grap at once in each BFS phase.
.RE
.sp
\fB\-z, \-\-depth\-first\fP
.RS 4
Use a (chunked) depth first topological sort.
.RE
.sp
\fB\-Z, \-\-depth\-first\-chunk\fP=\fIN\fP
.RS 4
Chunk size for the depth first topological sort. Specify how many nucleotides to grap at once in each DFS phace.
.RE
.sp
\fB\-w, \-\-two\-way\fP
.RS 4
Use a two\-way topological algorithm for sorting. It is a maximum of head\-first and tail\-first topological sort.
.RE
.sp
\fB\-n, \-\-no\-seeds\fP
.RS 4
Don\(cqt use heads or tails to seed topological sort.
.RE
.sp
\fB\-c, \-\-cycle\-breaking\fP
.RS 4
Use a cycle breaking sort.
.RE
.SS "Random Sort"
.sp
\fB\-r, \-\-random\fP
.RS 4
Randomly sort the graph.
.RE
.SS "Mondriaan Sort"
.sp
\fB\-m, \-\-mondriaan\fP
.RS 4
Use the sparse matrix diagonalization to sort the graph.
.RE
.sp
\fB\-N, \-\-mondriaan\-n\-parts\fP=\fIN\fP
.RS 4
Number of partitions for the mondriaan sort.
.RE
.sp
\fB\-E, \-\-mondriaan\-epsilon\fP=\fIN\fP
.RS 4
Set the epsilon parameter for the mondriaan sort.
.RE
.sp
\fB\-W, \-\-mondriaan\-path\-weight\fP
.RS 4
Weight the mondriaan input matrix by the path coverage of edges.
.RE
.SS "1D Linear SGD Sort"
.sp
\fB\-S, \-\-linear\-sgd\fP
.RS 4
Apply 1D linear SGD algorithm to sort the graph.
.RE
.sp
\fB\-O, \-\-sgd\-bandwidth\fP=\fIsgd\-bandwidth\fP
.RS 4
Bandwidth of linear SGD model. The default value is \fI1000\fP.
.RE
.sp
\fB\-Q, \-\-sgd\-sampling\-rate\fP=\fIsgd\-sampling\-rate\fP
.RS 4
Sample pairs of nodes with probability distance between them divided by the sampling rate. The default value is \fI20\fP.
.RE
.sp
\fB\-K, \-\-sgd\-use\-paths\fP
.RS 4
Use the paths to structure the distances between nodes in SGD.
.RE
.sp
\fB\-T, \-\-sgd\-iter\-max\fP=\fIsgd_iter\-max\fP
.RS 4
The maximum number of iterations for the linear SGD model. The default value is \fI30\fP.
.RE
.sp
\fB\-V, \-\-sgd\-eps\fP=\fIsgd\-eps\fP
.RS 4
The final learning rate for the linear SGD model. The default value is \fI0.01\fP.
.RE
.sp
\fB\-C, \-\-sgd\-delta\fP=\fIsgd\-delta\fP
.RS 4
The threshold of the maximum node displacement, approximately in base pairs, at which to stop SGD.
.RE
.SS "Eades Sort"
.sp
\fB\-e, \-\-eades\fP
.RS 4
Use eades algorithm.
.RE
.SS "Path Sorting Options"
.sp
\fB\-L, \-\-paths\-min\fP
.RS 4
Sort paths by their lowest contained node identifier.
.RE
.sp
\fB\-M, \-\-paths\-max\fP
.RS 4
Sort paths by their highest contained node identifier.
.RE
.sp
\fB\-A, \-\-paths\-avg\fP
.RS 4
Sort paths by their average contained node identifier.
.RE
.sp
\fB\-R, \-\-paths\-avg\-rev\fP
.RS 4
Sort paths in reverse by their average contained node identifier.
.RE
.sp
\fB\-D, \-\-path\-delim\fP=\fIpath\-delim\fP
.RS 4
Sort paths in bins by their prefix up to this delimiter.
.RE
.SS "Pipeline Sorting"
.sp
\fB\-p, \-\-pipeline\fP=\fISTRING\fP
.RS 4
Apply a series of sorts, based on single character command line arguments given to this command. The default sort is
\fIs\fP. The reverse sort would be specified via \fIf\fP.
.RE
.SS "Additional Parameters"
.sp
\fB\-d, \-\-dagify\-sort\fP
.RS 4
Sort on the basis of a DAGified graph.
.RE
.sp
\fB\-O, \-\-Optimize\fP
.RS 4
Use the MutableHandleGraph::optimize method to compact the node identifier space.
.RE
.SS "Threading"
.sp
\fB\-t, \-\-threads\fP=\fIN\fP
.RS 4
Number of threads to use for parallel sorting in SGD. Only specify this argument in combination with \fB\-S, \-\-linear\-sgd\fP. No multi\-threading support for any other sorting algorithm.
.RE
.SS "Processing Information"
.sp
\fB\-P, \-\-progress\fP
.RS 4
Print sort progress to stdout.
.RE
.SS "Program Information"
.sp
\fB\-h, \-\-help\fP
.RS 4
Print a help message for \fBodgi sort\fP.
.RE
.SH "EXIT STATUS"
.sp
\fB0\fP
.RS 4
Success.
.RE
.sp
\fB1\fP
.RS 4
Failure (syntax or usage error; parameter error; file processing failure; unexpected error).
.RE
.SH "BUGS"
.sp
Refer to the \fBodgi\fP issue tracker at \c
.URL "https://github.com/vgteam/odgi/issues" "" "."
.SH "AUTHORS"
.sp
\fBodgi sort\fP was written by Erik Garrison.
.SH "RESOURCES"
.sp
\fBProject web site:\fP \c
.URL "https://github.com/vgteam/odgi" "" ""
.sp
\fBGit source repository on GitHub:\fP \c
.URL "https://github.com/vgteam/odgi" "" ""
.sp
\fBGitHub organization:\fP \c
.URL "https://github.com/vgteam" "" ""
.sp
\fBDiscussion list / forum:\fP \c
.URL "https://github.com/vgteam/odgi/issues" "" ""
.SH "COPYING"
.sp
The MIT License (MIT)
.sp
Copyright (c) 2019 Erik Garrison
.sp
Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:
.sp
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
.sp
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
.SH "AUTHOR"
.sp
Erik Garrison